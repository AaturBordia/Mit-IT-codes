
SQL> CREATE TABLE CUSTOMER (
  2      cust INT PRIMARY KEY,
  3      cname VARCHAR(50),
  4      city VARCHAR(30)
  5  );

Table created.

SQL>
SQL>
SQL> CREATE TABLE ORDERS (
  2      order_ INT PRIMARY KEY,
  3      odate DATE,
  4      cust INT,
  5      ordamt INT,
  6      FOREIGN KEY (cust) REFERENCES CUSTOMER(cust)
  7  );

Table created.

SQL>
SQL>
SQL> CREATE TABLE ITEM (
  2      item INT PRIMARY KEY,
  3      unitprice INT
  4  );

Table created.

SQL>
SQL>
SQL> CREATE TABLE ORDER_ITEMS (
  2      order_ INT,
  3      item INT,
  4      qty INT,
  5      PRIMARY KEY (order_, item),
  6      FOREIGN KEY (order_) REFERENCES ORDERS(order_),
  7      FOREIGN KEY (item) REFERENCES ITEM(item)
  8  );

Table created.

SQL>
SQL>
SQL> CREATE TABLE SHIPMENT (
  2      order_ INT,
  3      warehouse INT,
  4      shipdate DATE,
  5      PRIMARY KEY (order_, warehouse),
  6      FOREIGN KEY (order_) REFERENCES ORDERS(order_)
  7  );

Table created.

SQL>
SQL> CREATE TABLE WAREHOUSE (
  2      warehouse INT PRIMARY KEY,
  3      city VARCHAR(30)
  4  );

Table created.

SQL>
SQL>
SQL> INSERT INTO CUSTOMER VALUES (1, 'Rahul Sharma', 'Delhi');

1 row created.

SQL> INSERT INTO CUSTOMER VALUES (2, 'Priya Verma', 'Mumbai');

1 row created.

SQL> INSERT INTO CUSTOMER VALUES (3, 'Amit Singh', 'Bangalore');

1 row created.

SQL> INSERT INTO CUSTOMER VALUES (4, 'Meera Patel', 'Ahmedabad');

1 row created.

SQL> INSERT INTO CUSTOMER VALUES (5, 'Rajesh Gupta', 'Kolkata');

1 row created.

SQL>
SQL> INSERT INTO ORDERS VALUES (101,'17-AUG-2023', 1, 50000);

1 row created.

SQL> INSERT INTO ORDERS VALUES (102,'18-AUG-2023', 2, 7500);

1 row created.

SQL> INSERT INTO ORDERS VALUES (103,'19-AUG-2023', 1, 3000);

1 row created.

SQL> INSERT INTO ORDERS VALUES (104,'20-AUG-2023', 3, 60000);

1 row created.

SQL> INSERT INTO ORDERS VALUES (105,'21-AUG-2023', 4, 4000);

1 row created.

SQL>
SQL>
SQL> INSERT INTO ITEM VALUES (201, 10);

1 row created.

SQL> INSERT INTO ITEM VALUES (202, 20);

1 row created.

SQL> INSERT INTO ITEM VALUES (203, 15);

1 row created.

SQL> INSERT INTO ITEM VALUES (204, 25);

1 row created.

SQL> INSERT INTO ITEM VALUES (205, 30);

1 row created.

SQL>
SQL>
SQL> INSERT INTO ORDER_ITEMS VALUES (101, 201, 5);

1 row created.

SQL> INSERT INTO ORDER_ITEMS VALUES (101, 202, 3);

1 row created.

SQL> INSERT INTO ORDER_ITEMS VALUES (102, 203, 7);

1 row created.

SQL> INSERT INTO ORDER_ITEMS VALUES (103, 201, 2);

1 row created.

SQL> INSERT INTO ORDER_ITEMS VALUES (104, 204, 4);

1 row created.

SQL>
SQL>
SQL> INSERT INTO SHIPMENT VALUES (101, 1,'17-AUG-2023');

1 row created.

SQL> INSERT INTO SHIPMENT VALUES (102, 2,'18-AUG-2023');

1 row created.

SQL> INSERT INTO SHIPMENT VALUES (103, 1,'17-AUG-2023');

1 row created.

SQL> INSERT INTO SHIPMENT VALUES (104, 3,'19-AUG-2023');

1 row created.

SQL> INSERT INTO SHIPMENT VALUES (105, 4,'20-AUG-2023');

1 row created.

SQL>
SQL>
SQL> INSERT INTO WAREHOUSE VALUES (1, 'Delhi');

1 row created.

SQL> INSERT INTO WAREHOUSE VALUES (2, 'Mumbai');

1 row created.

SQL> INSERT INTO WAREHOUSE VALUES (3, 'Bangalore');

1 row created.

SQL> INSERT INTO WAREHOUSE VALUES (4, 'Ahmedabad');

1 row created.

SQL> INSERT INTO WAREHOUSE VALUES (5, 'Kolkata');

1 row created.

SQL> SELECT C.cname AS CUSTNAME, COUNT(O.order_) AS No_of_Orders, AVG(O.ordamt) AS AVG_ORDER_AMT FROM CUSTOMER C LEFT JOIN ORDERS O ON C.cust = O.cust GROUP BY C.cname;

CUSTNAME                                           NO_OF_ORDERS AVG_ORDER_AMT
-------------------------------------------------- ------------ -------------
Priya Verma                                                   1          7500
Meera Patel                                                   1          4000
Amit Singh                                                    1         60000
Rajesh Gupta                                                  0
Rahul Sharma                                                  2         26500

SQL> SELECT DISTINCT O.order_ FROM ORDERS O WHERE NOT EXISTS (SELECT W.warehouse FROM WAREHOUSE W WHERE W.city = 'Bangalore' AND W.warehouse NOT IN (SELECT S.warehouse FROM SHIPMENT S WHERE S.order_ = O.order_));

    ORDER_
----------
       104

SQL> UPDATE ORDERS SET ordamt = CASE WHEN EXISTS (SELECT 1 FROM ORDER_ITEMS WHERE order_ = ORDERS.order_ AND qty > 10) THEN ordamt * 0.90 ELSE ordamt * 0.95 END;

5 rows updated.

SQL> select * from orders;

    ORDER_ ODATE           CUST     ORDAMT
---------- --------- ---------- ----------
       101 17-AUG-23          1      47500
       102 18-AUG-23          2       7125
       103 19-AUG-23          1       2850
       104 20-AUG-23          3      57000
       105 21-AUG-23          4       3800

SQL> commit;

Commit complete.